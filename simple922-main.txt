package com.example.janghyunsoo.server;

import android.app.Activity;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.widget.EditText;
import android.widget.MediaController;
import android.widget.Toast;
import android.widget.VideoView;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.Socket;



public class MainActivity extends Activity {
    private EditText et1, et2, et3;
    private Socket socket;
    private DataOutputStream writeSocket;
    private DataInputStream readSocket;
    private Handler mHandler = new Handler();

    private String globalNumber;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        et1 = (EditText) findViewById(R.id.editText1);
        et2 = (EditText) findViewById(R.id.editText2);
        et3 = (EditText) findViewById(R.id.editText3);

        //라즈베리파이 영상 스트리밍 받아오기
        //VideoView v = (VideoView) findViewById( R.id.videoView1 );
        //String uri = "rtsp://192.168.0.18:8555/unicast";
        String uri = "https://archive.org/download/ksnn_compilation_master_the_internet/ksnn_compilation_master_the_internet_512kb.mp4";
        VideoView v = (VideoView) findViewById( R.id.videoView1 );
        Uri videoUri = Uri.parse(uri);
        v.setVideoURI(videoUri);
        MediaController nc = new MediaController(this);
        v.setMediaController(nc);
        nc.setMediaPlayer(v);
        //v.setVideoPath(videoUri.getPath());
        v.requestFocus();
        v.start();
        //(new getView()).start();
    }

    @SuppressWarnings("deprecation")
    public void OnClick(View v) throws Exception {
        switch (v.getId()) {
            case R.id.button1:
                (new Connect()).start();
                break;
            case R.id.button2:
                (new Disconnect()).start();
                break;
            case R.id.button10:
                globalNumber = "12"; //go
                (new sendMessage()).start();
                break;
            case R.id.button11:
                globalNumber = "11"; //left
                (new sendMessage()).start();
                break;
            case R.id.button12:
                globalNumber = "13"; //pause
                (new sendMessage()).start();
                break;
            case R.id.button13:
                globalNumber = "10"; //right
                (new sendMessage()).start();
                break;
            case R.id.button15:
                globalNumber = "00"; //call
                (new sendMessageText()).start();
                break;
            case R.id.button16:
                globalNumber = "01"; //clean
                (new sendMessage()).start();
                break;
            case R.id.button17:
                globalNumber = "4"; //exit
                (new sendMessage()).start();
                break;
            case R.id.button18:
                globalNumber = "2"; //play
                (new sendMessage()).start();
                break;
            case R.id.button19:
                globalNumber = "3"; //find
                (new sendMessage()).start();
                break;
        }
    }

    class Connect extends Thread {
        public void run() {
            Log.d("Connect", "Run Connect");
            String ip = null;
            int port = 0;

            try {
                ip = et1.getText().toString();
                port = Integer.parseInt(et2.getText().toString());
            } catch (Exception e) {
                final String recvInput = "Check ip & port.";
                mHandler.post(new Runnable() {

                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        setToast(recvInput);
                    }
                });
            }
            try {
                socket = new Socket(ip, port);
                writeSocket = new DataOutputStream(socket.getOutputStream());
                readSocket = new DataInputStream(socket.getInputStream());

                mHandler.post(new Runnable() {

                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        setToast("Connect.");
                    }

                });
                (new recvSocket()).start();
            } catch (Exception e) {
                final String recvInput = "Fail to connect.";
                Log.d("Connect", e.getMessage());
                mHandler.post(new Runnable() {

                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        setToast(recvInput);
                    }

                });

            }

        }
    }

    class Disconnect extends Thread {
        public void run() {
            try {
                if (socket != null) {
                    socket.close();
                    mHandler.post(new Runnable() {

                        @Override
                        public void run() {
                            // TODO Auto-generated method stub
                            setToast("연결이 종료되었습니다.");
                        }
                    });

                }

            } catch (Exception e) {
                final String recvInput = "연결에 실패하였습니다.";
                Log.d("Connect", e.getMessage());
                mHandler.post(new Runnable() {

                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        setToast(recvInput);
                    }

                });

            }

        }
    }

    class recvSocket extends Thread {

        public void run() {
            try {
                readSocket = new DataInputStream(socket.getInputStream());

                while (true) {
                    byte[] b = new byte[100];
                    int ac = readSocket.read(b, 0, b.length);
                    String input = new String(b, 0, b.length);
                    final String recvInput = input.trim();

                    if(ac==-1)
                        break;

                    mHandler.post(new Runnable() {

                        @Override
                        public void run() {
                            // TODO Auto-generated method stub
                            setToast(recvInput);
                        }

                    });
                }
                mHandler.post(new Runnable(){

                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        setToast("Disconnect.");
                    }

                });
            } catch (Exception e) {
                final String recvInput = "Disconnect.";
                Log.d("SetServer", e.getMessage());
                mHandler.post(new Runnable() {

                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        setToast(recvInput);
                    }

                });

            }

        }
    }

    class sendMessage extends Thread {
        public void run() {
            try {
                byte[] b = new byte[100];
                //String a = "0";
                //a = globalNumber;
                b = globalNumber.getBytes();
                writeSocket.write(b);


            } catch (Exception e) {
                final String recvInput = "Failure send to message .";
                Log.d("SetServer", e.getMessage());
                mHandler.post(new Runnable() {

                    @Override
                    public void run() {
                        // TODO Auto-generated method stub
                        setToast(recvInput);
                    }

                });

            }

        }
    }
    class sendMessageText extends Thread {
        public void run() {

            String chat = null;
            try {
                chat = et3.getText().toString();
            } catch (Exception e) {
                final String recvInput = "Check message.";
                mHandler.post(new Runnable() {

                    @Override
                    public void run() {
                    // TODO Auto-generated method stub
                    setToast(recvInput);
                    }
                });
            }
            try {
                byte[] b = new byte[100];
                //String a = "0";
                //a = globalNumber;
                b = chat.getBytes();
                writeSocket.write(b);

            } catch (Exception e) {
                final String recvInput = "Failure send to message .";
                Log.d("SetServer", e.getMessage());
                mHandler.post(new Runnable() {

                        @Override
                        public void run() {
                    // TODO Auto-generated method stub
                    setToast(recvInput);
                }

                    });

            }

        }
    }
/*
    class getView extends Thread {
        public void run(){
            try {


            }
            catch (Exception e) {
            }
        }
    }
*/
    void setToast(String msg) {
        Toast.makeText(this, msg, Toast.LENGTH_SHORT).show();
    }

}